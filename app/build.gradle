apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

android {
//    project.ext.setDefaultConfig project
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    def buildConfigTest = ""
    def server_host = ""
    defaultConfig {
        if (SERVER_HOST.equals("test")) {
            applicationId rootProject.ext.android.applicationId_test
        } else {
            applicationId rootProject.ext.android.applicationId_pro
        }
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        server_host = SERVER_HOST
        buildConfigField("String", "SERVER_HOST", "\"" + server_host + "\"")
        println("--------server_host:" + server_host + "--------")

        buildConfigTest = rootProject.ext.android.buildConfigTest
        buildConfigField("String", "BUILDCONFIGTEST", "\"" + buildConfigTest + "\"")

        multiDexEnabled true //可以分dex
        flavorDimensions "applicationId"
        flavorDimensions "versionName"
    }

    signingConfigs {
        keystore1 {
            storeFile file('/Users/bkjk/cherry_and.jks')
            storePassword '123456'
            keyAlias 'cherry'
            keyPassword '123456'
        }
    }

    //对于双向绑定，刚好可以使用DataBinding，DataBinding是一个实现数据和UI绑定的框架，是构建MVVM模式的一个关键的工具。
    dataBinding {
        enabled true
    }

    sourceSets {
        main.jniLibs.srcDirs = ['libs']
        main {
            java.srcDirs = ['src/common/java', 'src/main/java']
            res.srcDirs = ['src/main/res/activity',
                           'src/main/res/broadcast',
                           'src/main/res/layouta',
                           'src/main/res/broadcast1',
                           'src/main/res/item',
                           'src/main/res/header',
                           'src/main/res/',
                           'src/common/res']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.keystore1
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.keystore1
            minifyEnabled true  //是否开启混淆
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //在我看来他就是Gradle的多渠道打包，你可以在不同的包定义不同的变量，实现自己的定制化版本的需求
//    productFlavors {
//        Cherry_Test{
//            "applicationId"  "com.cherry.cherry_anddemo.Cherry_Test"
//            "versionName"    "1.0"
//        }
//        Cherry_Pro{
//            "applicationId"  "com.cherry.cherry_anddemo.Cherry_Pro"
//            "versionName"    "2.0"
//        }
//    }

    dexOptions {//dex配置
        threadCount java.lang.Runtime.getRuntime().availableProcessors() + 1
        javaMaxHeapSize "4g"
        preDexLibraries = false
        /*additionalParameters = [//dex参数详见 dx --help
                                '--multi-dex',//多分包
                                '--set-max-idx-number=60000',//每个包内方法数上限
                                '--main-dex-list='+projectDir+'/maindexlist.txt',//打包进主classes.dex的文件列表
                                '--minimal-main-dex'//使上一句生效
        ]*/
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            String oldName = file.name
//            if(!oldName.contains("debug")){
//            }
            if (oldName != null && oldName.endsWith('.apk')) {
                // 输出apk名称为XXX20160328_v1.0.0_vc10_XXXX_test.apk
                def fileName = "cherry_${buildTime()}_v${rootProject.ext.android.versionName}.apk"
                //output.outputFile 改为 outputFileName
                output.apkData.outputFileName = fileName
            }
        }

    }

    greendao {
        schemaVersion 1
        daoPackage 'com.cherry.cherry_anddemo.ui.interview.database.greendao.gen'
        targetGenDir 'src/main/java'
    }
}

def buildTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-v4:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //GreenDao
    implementation rootProject.ext.dependencies["greendao"]
    implementation rootProject.ext.dependencies["greendao-generator"]
    implementation rootProject.ext.dependencies["GreenDaoUpgradeHelper"]
//    implementation 'org.greenrobot:greendao:3.1.0'
//    implementation 'org.greenrobot:greendao-generator:3.1.0'
//    implementation 'com.github.yuweiguocn:GreenDaoUpgradeHelper:v1.4.0'

    //OrmLite
    implementation rootProject.ext.dependencies["ormlite-android"]
    implementation rootProject.ext.dependencies["ormlite-core"]

    //baidumap
    implementation files('libs/BaiduLBS_Android.jar')

    //eventbus
    implementation rootProject.ext.dependencies["eventbus"]

    //rxjava
    implementation rootProject.ext.dependencies["rxjava"]
    implementation rootProject.ext.dependencies["rxandroid"]

    //leakcanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.3.1' // or 1.4-beta1
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1' // or 1.4-beta1
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1' // or 1.4-beta1

    //butterknife
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    implementation project(':librarycommon')
    if (!Boolean.valueOf(rootProject.ext.moduleshop)) {
        implementation project(':libraryshop')
    }
    if (!Boolean.valueOf(rootProject.ext.modulepay)) {
        implementation project(':librarypay')
    }
//    if (!rootProject.ext.isModule){
//        implementation project(':libraryshop')
//        implementation project(':librarypay')
//    }
}
